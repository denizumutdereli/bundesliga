{
	"info": {
		"_postman_id": "cacb2e38-d491-4b8c-a8e6-a79462a0c410",
		"name": "Bundesliga Fantasy League",
		"description": "``` javascript\n/**\n * @author Deniz Umut dereli\n * @mail denizumutdereli@gmail.com\n * @linkedin denizumutdereli\n * @github denizumutdereli\n * @project Bundesliga Fantasy League Rest API\n * @date 18/02/2022\n * @license MIT Licence\n * \n * This is a demo purpose project.\n * \n **/\n\n```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "/",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								""
							]
						},
						"description": "``` javascript\n/**\n * @api {all} / Default Welcome\n * @apiName Welcome\n * @apiPermission Guests\n * @apiGroup User\n * \n * @rateLimit 1 Windwos (IP) / Request limit:100 - Default Limit app.js\n * \n * @apiSuccess (200) {Object} mixed object\n * @apiError (404) {Object} {status: true, message: message}\n **/\n\n```"
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "api/user",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/api/user?token=",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"api",
								"user"
							],
							"query": [
								{
									"key": "token",
									"value": ""
								}
							]
						},
						"description": "``` javascript\n/**\n * @api {get} /users /users/account /users/profile\n * @apiName Show Profile - if user.role == admin, list all;\n * @apiPermission JWT Token\n * @apiGroup User\n *\n * @apiParam  {String} [token] token\n * @apiHiddenParam {String} password\n *\n * @rateLimit 1 Hour Window (IP) / Request limit:10 / JWT 12 minutes\n *\n * @apiSuccess (200) {Object} mixed `User` object(s) -> user.role == admin, list all\n * @apiError (200) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "/user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/user",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"user"
							]
						},
						"description": "``` javascript\n/**\n * @api {post} /user /register Create user\n * @apiName Create new users\n * @apiPermission Registration\n * @apiGroup User\n *\n * @apiParam  {String} [userName] username unique\n * @apiParam  {String} [email] password\n * @apiParam  {String} [role] enum [seller, buyer] from Schema\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:100 JWT 12 minutes\n * \n * @apiSuccess (200) {Object} mixed `User` object -> @apiHiddenParam {String} password\n * @apiError (200) {Object} {status: false, message: message}\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "/register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "testuser",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/user",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"user"
							]
						},
						"description": "``` javascript\n/**\n * @api {post} /user /register Create user\n * @apiName Create new users\n * @apiPermission Registration\n * @apiGroup User\n *\n * @apiParam  {String} [userName] username unique\n * @apiParam  {String} [email] password\n * @apiParam  {String} [role] enum [seller, buyer] from Schema\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:100 JWT 12 minutes\n * \n * @apiSuccess (200) {Object} mixed `User` object -> @apiHiddenParam {String} password\n * @apiError (200) {Object} {status: false, message: message}\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "/auth",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						},
						"description": "``` javascript\n/**\n * @api {post} /auth Auth user\n * @apiName Auth users\n * @apiPermission JWT / 720 seconds / Active Session - no paralel use\n * @apiGroup User\n *\n * @apiParam  {String} [userName] username\n * @apiParam  {String} [email] password\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:100 JWT 12 minutes\n * \n * @apiSuccess (200) {Object} mixed `JWT token` object\n * @apiError (401) {Object} {status: false, message: message}\n **/\n\n\n```"
					},
					"response": []
				},
				{
					"name": "api/user/update/:user_id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/api/user/update/:user_id",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"api",
								"user",
								"update",
								":user_id"
							],
							"variable": [
								{
									"key": "user_id",
									"value": null
								}
							]
						},
						"description": "``` javascript\n\n/**\n * @api {put} /users/update:user_id\n * @apiName Update user - if user.role == admin, possible to update all;\n * @apiPermission JWT Token\n * @apiGroup User\n *\n * @apiParam  {String} [token] token\n * @apiParam  {String} [password] password - auto hash when update\n * @apiImmutableParam  {String} [role] enum [user, admin] from Schema immutable:true/false\n * @apiImmutableParam {String} [username] username from Schema immutable:true/false\n *\n * @rateLimit 1 Hour Window (IP) / Request limit:10 / JWT 12 minutes\n *\n * @apiFixing if user_id is different then the authenticated user's id,\n * ignoring the user_id parameter and continue with user own id.{userid = username from JWTtoken}\n *\n * @apiSuccess (200) {Object} mixed `User` object\n * @apiError (200) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				}
			]
		},
		{
			"name": "season",
			"item": [
				{
					"name": "api/season/",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/api/season/",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"api",
								"season",
								""
							]
						},
						"description": "``` javascript\n\n/**\n * @api {get} /api/season\n * @apiName Show All Season List\n * @apiPermission JWT Token\n * @apiGroup User (all users)\n *\n * @apiParam  {String} [token] token\n * @apiParam  {Number} page  -> Paggination: current page : Default:1\n * @apiParam  {Number} perpage -> Paggination: number of items per page\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:50 / JWT 12 minutes\n * \n * @apiSuccess (200) {Object} mixed `Season` object(s)\n * @apiError (400) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "api/season/detail/:season_id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/api/season/detail/:season_id",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"api",
								"season",
								"detail",
								":season_id"
							],
							"variable": [
								{
									"key": "season_id",
									"value": null
								}
							]
						},
						"description": "``` javascript\n\n/**\n * @api {get} /season/detail/:season_id\n * @apiName Show Season Detail - No action\n * @apiPermission JWT Token\n * @apiGroup User (all users)\n *\n * @apiParam  {String} [token] token\n * @apiParam  {String} [season_id] season_id\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:50 / JWT 12 minutes\n * \n * @apiNote Season and Fixture statuses are Enum types. For future upgrade.\n * \n * @apiSuccess (200) {Object} mixed `Season` object\n * @apiError (400) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "api/season/",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								},
								{
									"key": "seasonName",
									"value": "Bundesliga IV",
									"type": "text"
								},
								{
									"key": "numberOfTeams",
									"value": "18",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/api/season/",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"api",
								"season",
								""
							]
						},
						"description": "``` javascript\n\n/**\n * @api {post} /api/season\n * @apiName Create New Season, teams and fixtures\n * @apiPermission JWT Token\n * @apiGroup User (all users)\n *\n * @apiParam  {String} [token] token\n * @apiParam  {String} seasonName\n * @apiParam  {Number} numberOfTeams -> Schema fixed to 100. I tested with 10K with no problem.\n * @apiParam  {Number} page  -> Paggination: current page : Default:1\n * @apiParam  {Number} perpage -> Paggination: number of items per page\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:50 / JWT 12 minutes\n * \n * @apiNote Permutation: fixture formula is: n*n-1 + team rows + computing time\n * @apiNote Workchain: GenerateSeason, GenerateTeams, GenerateFixtures\n * @apiNote Please check \"factory\" directory. Round algortihm works for the permutation.\n * \n * @apiSuccess (200) {Object} mixed\n * @apiError (400) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "api/season/delete/:season_id",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/api/season/delete/:season_id",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"api",
								"season",
								"delete",
								":season_id"
							],
							"variable": [
								{
									"key": "season_id",
									"value": null
								}
							]
						},
						"description": "``` javascript\n\n/**\n * @api {delete} /season/delete:season_id\n * @apiName Delete Season - mongoose Schema.pre.remove.relation functions, \n * @apiPermission JWT Token and only user.role == admin\n * @apiGroup User (season owners) - Admins are not permited \n *\n * @apiParam  {String} [token] token\n * @apiParam  {String} season_id\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:50 / JWT 12 minutes  (UserLimiter not in charge)\n * \n * @apiFixing if user_id is different then the authenticated user's id, \n * return {status:false, message:'You can only delete your own seasons.'}\n * \n * @apiSuccess (200) {Object} mixed `Result` object\n * @apiError (400) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				}
			]
		},
		{
			"name": "fixture",
			"item": [
				{
					"name": "api/fixture/:season_id",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwicm9sZSI6InVzZXIiLCJpYXQiOjE2NDUxMzYwMjAsImV4cCI6MTY0NTEzOTYyMH0.gq33M5rLMTog2hUpAyMD_vupG-FUnE0i-_YmfjIjLSM",
									"type": "text"
								},
								{
									"key": "page",
									"value": "1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "perpage",
									"value": "20",
									"type": "text",
									"disabled": true
								},
								{
									"key": "completed",
									"value": "1",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/api/fixture/:season_id",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"api",
								"fixture",
								":season_id"
							],
							"variable": [
								{
									"key": "season_id",
									"value": null
								}
							]
						},
						"description": "``` javascript\n/**\n * @api {post} /fixtures/:season_id\n * @apiName Show Fixtures \n * @apiPermission JWT Token\n * @apiGroup User\n *\n * @apiParam  {String} [token] token\n * @apiParam  {String} season_id\n * @apiParam  {Number} page  -> Paggination: current page : Default:1\n * @apiParam  {Number} perpage -> Paggination: number of items per page\n *\n * @rateLimit 1 Hour Window (IP) / Request limit:10 / JWT 12 minutes\n *\n * @apiSuccess (200) {Object} mixed Fixtures\n * @apiError (400) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				}
			]
		},
		{
			"name": "team",
			"item": [
				{
					"name": "api/team/:season_id",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								},
								{
									"key": "page",
									"value": "1",
									"type": "text"
								},
								{
									"key": "pages",
									"value": "10",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/api/team/:season_id",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"api",
								"team",
								":season_id"
							],
							"variable": [
								{
									"key": "season_id",
									"value": null
								}
							]
						},
						"description": "``` javascript\n/**\n * @api {post} /api/team/:season_id\n * @apiName Season Teams;\n * @apiPermission JWT Token\n * @apiGroup User\n *\n * @apiParam  {String} [token] token\n * @apiParam  {String} season_id\n * @apiParam  {Number} page  -> Paggination: current page : Default:1\n * @apiParam  {Number} perpage -> Paggination: number of items per page\n *\n * @rateLimit 1 Hour Window (IP) / Request limit:10 / JWT 12 minutes\n *\n * @apiNote POST Benchmark is much better right now. \n * @apiSuccess (200) {Object} mixed Teams\n * @apiError (400) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n \n\n```"
					},
					"response": []
				}
			]
		},
		{
			"name": "play",
			"item": [
				{
					"name": "api/season/start/:season_id",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/api/season/start/:season_id",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"api",
								"season",
								"start",
								":season_id"
							],
							"variable": [
								{
									"key": "season_id",
									"value": null
								}
							]
						},
						"description": "``` javascript\n/**\n * @api {post} /season/start/:season_id No action\n * @apiName Starting the Season : for future ie. an another cron to simulate fixtures etc.\n * @apiPermission JWT Token and only user.role == admin\n * @apiGroup User (season owners) - Admins are not permited\n *\n * @apiParam  {String} [token] token\n * @apiParam  {String} season_id\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:50 / JWT 12 minutes  (UserLimiter not in charge)\n * \n * @apiFixing if user_id is different then the authenticated user's id, \n * return {status:false, message:'You can only simulate your own seasons.'}\n * \n * @apiSuccess (200) {Object} mixed `Result` object\n * @apiError (400) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "api/season/fixture/play/:match_id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								},
								{
									"key": "home",
									"value": "2",
									"type": "text"
								},
								{
									"key": "away",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/api/fixture/play/:match_id",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"api",
								"fixture",
								"play",
								":match_id"
							],
							"variable": [
								{
									"key": "match_id",
									"value": null
								}
							]
						},
						"description": "``` javascript\n/**\n * @api {put} /fixture/play/:match_id\n * @apiName Simulate an individual match\n * @apiPermission JWT Token\n * @apiGroup User\n *\n * @apiParam  {String} [token] token\n * @apiParam  {String} match_id\n * @apiParam  {Number} home  -> goal count!\n * @apiParam  {Number} away -> goal count!\n *\n * @rateLimit 1 Hour Window (IP) / Request limit:10 / JWT 12 minutes\n *\n * @apiNote Other fixtures will be calculated but this match will be ignored as its already been computed.\n * \n * @apiSuccess (200) {Object} mixed\n * @apiError (400) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				},
				{
					"name": "api/season/simulate/:season_id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								},
								{
									"key": "weeks",
									"value": "1",
									"description": "default 1 week.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "days",
									"value": "FRIDAY",
									"description": "FRIDAY,SATURDAY,SUNDAY",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/api/season/simulate/:season_id",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"api",
								"season",
								"simulate",
								":season_id"
							],
							"variable": [
								{
									"key": "season_id",
									"value": null
								}
							]
						},
						"description": "``` javascript\n\n/**\n * @api {put} /season/simulate/:season_id \n * @apiName Simulating the Season \n * @apiPermission JWT Token and only user.role == admin\n * @apiGroup User (season owners) - Admins are not permited\n *\n * @apiParam  {String} [token] token\n * @apiParam  {String} season_id\n * @apiParam  {String} weeks : default 1, how many weeks do you want to simulate. max is length of the league\n * @apiParam  {String} days : enum [FRIDAY,SATURDAY,SUNDAY] //uncomment for to simulate given day mathcs\n * \n * @rateLimit 1 Hour Window (IP) / Request limit:50 / JWT 12 minutes  (UserLimiter not in charge)\n * \n * @apiFixing if user_id is different then the authenticated user's id, \n * return {status:false, message:'You can only simulate your own fixtures.'}\n * \n * @apiNote Individual match updates will be ignored and season fixtures will be continue as expected.\n * \n * @apiSuccess (200) {Object} mixed `Result` object\n * @apiError (400) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
					},
					"response": []
				}
			]
		},
		{
			"name": "standings",
			"item": [
				{
					"name": "api/standings/:season_id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								},
								{
									"key": "page",
									"value": "1",
									"type": "text"
								},
								{
									"key": "perpage",
									"value": "1",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://bundesligaleague.herokuapp.com/api/standings/:season_id",
							"protocol": "https",
							"host": [
								"bundesligaleague",
								"herokuapp",
								"com"
							],
							"path": [
								"api",
								"standings",
								":season_id"
							],
							"variable": [
								{
									"key": "season_id",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "``` javascript\n \n/**\n * @api {get} /api/standings/:season_id\n * @apiName Show Season Standings\n * @apiPermission JWT Token\n * @apiGroup User\n *\n * @apiParam  {String} [token] token\n * @apiParam  {String} season_id\n * @apiParam  {Number} page  -> Paggination: current page : Default:1  || currently disabled. \n * @apiParam  {Number} perpage -> Paggination: number of items per page || currently disabled\n *\n * @rateLimit 1 Hour Window (IP) / Request limit:100 / JWT 12 minutes\n *\n * @apiNote Bundesliga football league rules | use uncomment for If their matches with each other are also effective...\n * @apiSuccess (200) {Object} mixed computed: Teams \n * @apiError (400) {Object} {status: false, message: message} //code:0 for I/O signals for demo purpose\n **/\n\n```"
		}
	]
}